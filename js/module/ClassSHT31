const ClassMiddleSensor=require("ClassSensorArchitecture");class ClassSHT31 extends ClassMiddleSensor{constructor(_opts,_sensor_props){ClassMiddleSensor.apply(this,[_opts,_sensor_props]),this._name="ClassSHT31",this._sensor=require("BaseClassSHT31").connect({i2c:_opts.bus,address:_opts.address,repeatability:_opts.repeatability}),this._minPeriod=1e3,this._usedChannels=[],this._interval}Init(_sensor_props){super.Init(_sensor_props)}Reset(){return this._sensor.reset(),"Sensor reset"}GetData(){this._sensor.read((function(err,d){err&&console.log("Error "+err.message),console.log("Temperature:",d.temp),console.log("Humidity:",d.humidity)}))}Start(_num_channel,_period){let period="number"==typeof _period&_period>=this._minPeriod?_period:this._minPeriod;this._usedChannels.includes(_num_channel)||this._usedChannels.push(_num_channel),this._interval||(this._interval=setInterval(()=>{this._sensor.read((err,d)=>{err&&comsole.log(err.message),this._usedChannels.includes(0)&&(this.Ch0_Value=d.temp),this._usedChannels.includes(1)&&(this.Ch1_Value=d.humidity)})},period)),this._currentPeriod=period}ChangeFrequency(_num_channel,freq){clearInterval(this._interval),setTimeout(()=>this.Start(freq),this._minfrequency)}Stop(_num_channel){_num_channel?this._usedChannels.splice(this._usedChannels.indexOf(_num_channel)):(this._usedChannels=[],clearInterval(this._interval),this._interval=null)}}exports=ClassSHT31;