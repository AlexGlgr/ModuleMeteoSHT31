const ClassMiddleSensor=require("ClassSensorArchitecture");class ClassSHT31 extends ClassMiddleSensor{constructor(_opts,_sensor_props){ClassMiddleSensor.apply(this,[_opts,_sensor_props]),this._Name="ClassSHT31",this._Sensor=require("BaseClassSHT31").connect({i2c:_opts.bus,address:_opts.address,repeatability:_opts.repeatability}),this._MinPeriod=1e3,this._UsedChannels=[],this._Interval}Init(_sensor_props){super.Init(_sensor_props)}Reset(){return this._Sensor.reset(),"Sensor reset"}GetData(){this._Sensor.read((function(err,d){err&&console.log("Error "+err.message),console.log("Temperature:",d.temp),console.log("Humidity:",d.humidity)}))}Start(_num_channel,_period){let period="number"==typeof _period&_period>=this._MinPeriod?_period:this._MinPeriod;this._UsedChannels.includes(_num_channel)||this._UsedChannels.push(_num_channel),this._Interval||(this._Interval=setInterval(()=>{this._Sensor.read((err,d)=>{err&&comsole.log(err.message),this._UsedChannels.includes(0)&&(this.Ch0_Value=d.temp),this._UsedChannels.includes(1)&&(this.Ch1_Value=d.humidity)})},period)),this._currentPeriod=period}ChangeFreq(_num_channel,freq){clearInterval(this._Interval),setTimeout(()=>this.Start(freq),this._Minfrequency)}Stop(_num_channel){_num_channel?this._UsedChannels.splice(this._UsedChannels.indexOf(_num_channel)):(this._UsedChannels=[],clearInterval(this._Interval),this._Interval=null)}}exports=ClassSHT31;