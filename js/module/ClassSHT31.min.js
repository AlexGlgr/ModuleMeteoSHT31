const ClassMiddleSensor=require("https://raw.githubusercontent.com/Nicktonious/ModuleSensorArchitecture/main/js/module/ClassSensorArchitecture.min.js"),I2C=require("https://raw.githubusercontent.com/AlexGlgr/ModuleBaseI2CBus/fork-Alexander/js/module/ClassBaseI2CBus.min.js");class ClassSHT31 extends ClassMiddleSensor{constructor(_opts){ClassMiddleSensor.apply(this,[_opts]),this._name="ClassSHT31",this._sensor=require("https://raw.githubusercontent.com/AlexGlgr/ModuleMeteoSHT31/fork-Alexander/js/module/BaseClassSHT31.min.js").connectI2C(I2C.AddBus({sda:_opts._Pins[0],scl:_opts._Pins[1]}).IDBus),this._minPeriod=1e3,this._usedChannels=[],this._interval}Init(_sensor_props){super.Init(_sensor_props)}Reset(){return this._sensor.reset(),"Sensor reset"}GetData(){return this._sensor.read((function(d){console.log("Temperature:",d.temp),console.log("Humidity:",d.humidity)})),d}Start(_period,_num_channel){let period="number"==typeof _period&_period>=this._minPeriod?_period:this._minPeriod;this._usedChannels.includes(_num_channel)||this._usedChannels.push(_num_channel),this._interval||(this._interval=setInterval(()=>{this._sensor.read(d=>{this._usedChannels.includes(0)&&(this.Ch0_Value=d.temp),this._usedChannels.includes(1)&&(this.Ch1_Value=d.humidity)})},period)),this._currentPeriod=period}ChangeFrequency(freq){clearInterval(this._interval),setTimeout(()=>this.Start(freq),this._minfrequency)}Stop(_num_channel){_num_channel?this._usedChannels.splice(this._usedChannels.indexOf(_num_channel)):(this._usedChannels=[],clearInterval(this._interval),this._interval=null)}}exports=ClassSHT31;